diff --git a/FishingBuddy/libs/google-play-services.jar b/FishingBuddy/libs/google-play-services.jar
new file mode 100644
index 0000000..a85c5dc
Binary files /dev/null and b/FishingBuddy/libs/google-play-services.jar differ
diff --git a/FishingBuddy/src/com/fishingbuddy/gui/MainActivity.java b/FishingBuddy/src/com/fishingbuddy/gui/MainActivity.java
index d5950cf..2efc1b2 100644
--- a/FishingBuddy/src/com/fishingbuddy/gui/MainActivity.java
+++ b/FishingBuddy/src/com/fishingbuddy/gui/MainActivity.java
@@ -1,87 +1,126 @@
 package com.fishingbuddy.gui;
 
+import org.json.JSONException;
 
 import android.app.Activity;
 import android.content.Intent;
+import android.os.AsyncTask;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
+import android.widget.Toast;
 
 import com.fishingbuddy.R;
 import com.fishingbuddy.logic.FishingManager;
 import com.fishingbuddy.logic.GPSManager;
-import com.google.ads.AdRequest;
-import com.google.ads.AdSize;
-import com.google.ads.AdView;
+import com.fishingbuddy.logic.JSONWeatherParser;
+import com.fishingbuddy.logic.WeatherHttpClient;
+import com.fishingbuddy.logic.WeatherModel.Weather;
 import com.google.android.gms.maps.model.LatLng;
 
 public class MainActivity extends Activity {
-	
-	 private FishingManager fm = null;
-	 
+
+	private FishingManager fm = null;
+
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		// TODO Auto-generated method stub
-		super.onCreate(savedInstanceState);		
-        setContentView(R.layout.activity_main);
-        GenerateData();
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.activity_main);
+		GenerateData();
 	}
 
+	// Initiating Menu XML file (menu.xml)
+	@Override
+	public boolean onCreateOptionsMenu(Menu menu) {
+		MenuInflater menuInflater = getMenuInflater();
+		menuInflater.inflate(R.menu.main, menu);
+		return true;
+	}
 
+	/**
+	 * Event Handling for Individual menu item selected Identify single menu
+	 * item by it's id
+	 * */
+	@Override
+	public boolean onOptionsItemSelected(MenuItem item) {
 
-	 // Initiating Menu XML file (menu.xml)
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu)
-    {
-        MenuInflater menuInflater = getMenuInflater();
-        menuInflater.inflate(R.menu.main, menu);
-        return true;
-    }
-    /**
-     * Event Handling for Individual menu item selected
-     * Identify single menu item by it's id
-     * */
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item)
-    {
-         
-        switch (item.getItemId())
-        {
-        case R.id.itShowSwims:
-        	Intent fwl_activity = new Intent(this,FishingWaterListActivity.class);
+		switch (item.getItemId()) {
+		case R.id.itShowSwims:
+			Intent fwl_activity = new Intent(this,
+					FishingWaterListActivity.class);
 			startActivity(fwl_activity);
-            return true;
-        case R.id.itGen:
-        	GenerateData();
-        	return true;
-        case R.id.itMaps:
-    		Intent fishingmaps_activity = new Intent(this,FishingMaps.class);
-    		startActivity(fishingmaps_activity);
-        default:
-            return super.onOptionsItemSelected(item);
-        }
-    }
-    
-    Boolean created = false;
-    private void GenerateData(){
-        if(!created){
-    	fm = (FishingManager)getApplication();
-        GPSManager gpsm = new GPSManager(this);
-        int x = 0,y = 1;       
-       
-        fm.CreateFishingWater("Den Bosch", gpsm.getLocation(),"blabla");
-        fm.CreateFishingWater("Dommel", new LatLng(51.6635,5.3046),"blabla");
-        fm.CreateFishingWater("Biescheloop", new LatLng(51.6451,5.3201),"blabla");
-        fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 3), "ZuiderPlas",new LatLng(51.674,5.319) , "Fuckedup fishing");
-        fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 3), "Provinciehuis", new LatLng(51.677,5.331), "Fuckedup fishing");
-        fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 2), "A2", new LatLng(51.6644,5.3053), "Fuckedup fishing");
-        fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 1), "Biescheloop",  new LatLng(51.6478,5.3200), "Fuckedup fishing");
-        created = true;
-        }
-    }
+			return true;
+		case R.id.itGen:
+			// GenerateData();
+			JSONWeatherTask task = new JSONWeatherTask();
+			task.execute(new GPSManager(this).getLocation());
+
+			return true;
+		case R.id.itMaps:
+			Intent fishingmaps_activity = new Intent(this, FishingMaps.class);
+			startActivity(fishingmaps_activity);
+		default:
+			return super.onOptionsItemSelected(item);
+		}
+	}
+
+	Boolean created = false;
+
+	private void GenerateData() {
+		if (!created) {
+			fm = (FishingManager) getApplication();
+			GPSManager gpsm = new GPSManager(this);
+			int x = 0, y = 1;
+
+			fm.CreateFishingWater("Den Bosch", gpsm.getLocation(), "blabla");
+			fm.CreateFishingWater("Dommel", new LatLng(51.6635, 5.3046),
+					"blabla");
+			fm.CreateFishingWater("Biescheloop", new LatLng(51.6451, 5.3201),
+					"blabla");
+			fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 3),
+					"ZuiderPlas", new LatLng(51.674, 5.319), "Fuckedup fishing");
+			fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 3),
+					"Provinciehuis", new LatLng(51.677, 5.331),
+					"Fuckedup fishing");
+			fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 2),
+					"A2", new LatLng(51.6644, 5.3053), "Fuckedup fishing");
+			fm.CreateSwimForFishingWater((fm.getFishingwater().size() - 1),
+					"Biescheloop", new LatLng(51.6478, 5.3200),
+					"Fuckedup fishing");
+			created = true;
+		}
+	}
+
+	private class JSONWeatherTask extends AsyncTask<LatLng, Void, Weather> {
+
+		@Override
+		protected Weather doInBackground(LatLng... params) {
+			Weather weather = new Weather();
+			String data = ((new WeatherHttpClient()).getWeatherData(params[0]));
+
+			try {
+				weather = JSONWeatherParser.getWeather(data);
+
+				// Let's retrieve the icon
+				weather.iconData = ((new WeatherHttpClient())
+						.getImage(weather.currentCondition.getIcon()));
+
+			} catch (JSONException e) {
+				e.printStackTrace();
+			}
+			return weather;
+
+		}
+
+		@Override
+		protected void onPostExecute(Weather weather) {
+			super.onPostExecute(weather);
+			Log.d("áº„eather", "Temperature is:"
+					+ weather.temperature.getTemp());			
+		}
+	}
 
 }
diff --git a/FishingBuddy/src/com/fishingbuddy/logic/FishingManager.java b/FishingBuddy/src/com/fishingbuddy/logic/FishingManager.java
index aac70a3..ef056dc 100644
--- a/FishingBuddy/src/com/fishingbuddy/logic/FishingManager.java
+++ b/FishingBuddy/src/com/fishingbuddy/logic/FishingManager.java
@@ -4,19 +4,19 @@ import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
-import com.google.android.gms.maps.model.LatLng;
-
 import android.app.Application;
-import android.location.Location;
+import android.widget.Toast;
+
+import com.google.android.gms.maps.model.LatLng;
 
 public class FishingManager extends Application{	
 	private List<FishingWater> fishingwater = new ArrayList<FishingWater>();
 	private static Fisherman fisherman = null;
 	private List<Fish> all_known_fish = new ArrayList<Fish>();
-	private GPSManager gpsm = new GPSManager(this);
+	private GPSManager gpsm = new GPSManager(this);	
 	public FishingManager() {
 		/*Get all known fish*/
-		fillListWithFish();
+		fillListWithFish();		
 	}
 	
 	public boolean CreateFisherman(String name, Date birthday){
diff --git a/FishingBuddy/src/com/fishingbuddy/logic/JSONWeatherParser.java b/FishingBuddy/src/com/fishingbuddy/logic/JSONWeatherParser.java
new file mode 100644
index 0000000..f67cb8c
--- /dev/null
+++ b/FishingBuddy/src/com/fishingbuddy/logic/JSONWeatherParser.java
@@ -0,0 +1,109 @@
+package com.fishingbuddy.logic;
+
+/**
+ * This is a tutorial source code 
+ * provided "as is" and without warranties.
+ *
+ * For any question please visit the web site
+ * http://www.survivingwithandroid.com
+ *
+ * or write an email to
+ * survivingwithandroid@gmail.com
+ *
+ */
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import com.fishingbuddy.logic.WeatherModel.Location;
+import com.fishingbuddy.logic.WeatherModel.Weather;
+
+/*
+ * Copyright (C) 2013 Surviving with Android (http://www.survivingwithandroid.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+public class JSONWeatherParser {
+
+	public static Weather getWeather(String data) throws JSONException  {
+		Weather weather = new Weather();
+
+		// We create out JSONObject from the data
+		JSONObject jObj = new JSONObject(data);
+
+		// We start extracting the info
+		Location loc = new Location();
+
+		JSONObject coordObj = getObject("coord", jObj);
+		loc.setLatitude(getFloat("lat", coordObj));
+		loc.setLongitude(getFloat("lon", coordObj));
+
+		JSONObject sysObj = getObject("sys", jObj);
+		loc.setCountry(getString("country", sysObj));
+		loc.setSunrise(getInt("sunrise", sysObj));
+		loc.setSunset(getInt("sunset", sysObj));
+		loc.setCity(getString("name", jObj));
+		weather.location = loc;
+
+		// We get weather info (This is an array)
+		JSONArray jArr = jObj.getJSONArray("weather");
+
+		// We use only the first value
+		JSONObject JSONWeather = jArr.getJSONObject(0);
+		weather.currentCondition.setWeatherId(getInt("id", JSONWeather));
+		weather.currentCondition.setDescr(getString("description", JSONWeather));
+		weather.currentCondition.setCondition(getString("main", JSONWeather));
+		weather.currentCondition.setIcon(getString("icon", JSONWeather));
+
+		JSONObject mainObj = getObject("main", jObj);
+		weather.currentCondition.setHumidity(getInt("humidity", mainObj));
+		weather.currentCondition.setPressure(getInt("pressure", mainObj));
+		weather.temperature.setMaxTemp(getFloat("temp_max", mainObj));
+		weather.temperature.setMinTemp(getFloat("temp_min", mainObj));
+		weather.temperature.setTemp(getFloat("temp", mainObj));
+
+		// Wind
+		JSONObject wObj = getObject("wind", jObj);
+		weather.wind.setSpeed(getFloat("speed", wObj));
+		weather.wind.setDeg(getFloat("deg", wObj));
+
+		// Clouds
+		JSONObject cObj = getObject("clouds", jObj);
+		weather.clouds.setPerc(getInt("all", cObj));
+
+		// We download the icon to show
+
+
+		return weather;
+	}
+
+
+	private static JSONObject getObject(String tagName, JSONObject jObj)  throws JSONException {
+		JSONObject subObj = jObj.getJSONObject(tagName);
+		return subObj;
+	}
+
+	private static String getString(String tagName, JSONObject jObj) throws JSONException {
+		return jObj.getString(tagName);
+	}
+
+	private static float  getFloat(String tagName, JSONObject jObj) throws JSONException {
+		return (float) jObj.getDouble(tagName);
+	}
+
+	private static int  getInt(String tagName, JSONObject jObj) throws JSONException {
+		return jObj.getInt(tagName);
+	}
+
+}
\ No newline at end of file
diff --git a/FishingBuddy/src/com/fishingbuddy/logic/WeatherHttpClient.java b/FishingBuddy/src/com/fishingbuddy/logic/WeatherHttpClient.java
new file mode 100644
index 0000000..be4e34b
--- /dev/null
+++ b/FishingBuddy/src/com/fishingbuddy/logic/WeatherHttpClient.java
@@ -0,0 +1,148 @@
+package com.fishingbuddy.logic;
+
+/**
+ * This is a tutorial source code 
+ * provided "as is" and without warranties.
+ *
+ * For any question please visit the web site
+ * http://www.survivingwithandroid.com
+ *
+ * or write an email to
+ * survivingwithandroid@gmail.com
+ *
+ */
+
+import java.io.BufferedReader;
+import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+import com.google.android.gms.maps.model.LatLng;
+/*
+ * Copyright (C) 2013 Surviving with Android (http://www.survivingwithandroid.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+public class WeatherHttpClient {
+
+	private static String BASE_URL = "http://api.openweathermap.org/data/2.5/weather?q=";
+	private static String IMG_URL = "http://openweathermap.org/img/w/";
+
+
+	public String getWeatherData(String location) {
+		HttpURLConnection con = null ;
+		InputStream is = null;
+
+		try {
+			con = (HttpURLConnection) ( new URL(BASE_URL + location)).openConnection();
+			con.setRequestMethod("GET");
+			con.setDoInput(true);
+			con.setDoOutput(true);
+			con.connect();
+
+			// Let's read the response
+			StringBuffer buffer = new StringBuffer();
+			is = con.getInputStream();
+			BufferedReader br = new BufferedReader(new InputStreamReader(is));
+			String line = null;
+			while (  (line = br.readLine()) != null )
+				buffer.append(line + "\r\n");
+
+			is.close();
+			con.disconnect();
+			return buffer.toString();
+	    }
+		catch(Throwable t) {
+			t.printStackTrace();
+		}
+		finally {
+			try { is.close(); } catch(Throwable t) {}
+			try { con.disconnect(); } catch(Throwable t) {}
+		}
+
+		return null;
+
+	}
+
+	public String getWeatherData(LatLng location) {
+		HttpURLConnection con = null ;
+		InputStream is = null;
+		String base_url = "http://api.openweathermap.org/data/2.5/weather?";
+		String lat_base = "lat=";
+		String long_base = "&lon=";
+		String metirc_base = "&units=metric";
+		try {
+			con = (HttpURLConnection) ( new URL(base_url + lat_base+ location.latitude + long_base + location.longitude+metirc_base)).openConnection();
+			con.setRequestMethod("GET");
+			con.setDoInput(true);
+			con.setDoOutput(true);
+			con.connect();
+
+			// Let's read the response
+			StringBuffer buffer = new StringBuffer();
+			is = con.getInputStream();
+			BufferedReader br = new BufferedReader(new InputStreamReader(is));
+			String line = null;
+			while (  (line = br.readLine()) != null )
+				buffer.append(line + "\r\n");
+
+			is.close();
+			con.disconnect();
+			return buffer.toString();
+	    }
+		catch(Throwable t) {
+			t.printStackTrace();
+		}
+		finally {
+			try { is.close(); } catch(Throwable t) {}
+			try { con.disconnect(); } catch(Throwable t) {}
+		}
+
+		return null;
+
+	}
+
+	public byte[] getImage(String code) {
+		HttpURLConnection con = null ;
+		InputStream is = null;
+		try {
+			con = (HttpURLConnection) ( new URL(IMG_URL + code)).openConnection();
+			con.setRequestMethod("GET");
+			con.setDoInput(true);
+			con.setDoOutput(true);
+			con.connect();
+
+			// Let's read the response
+			is = con.getInputStream();
+			byte[] buffer = new byte[1024];
+			ByteArrayOutputStream baos = new ByteArrayOutputStream();
+
+			while ( is.read(buffer) != -1)
+				baos.write(buffer);
+
+			return baos.toByteArray();
+	    }
+		catch(Throwable t) {
+			t.printStackTrace();
+		}
+		finally {
+			try { is.close(); } catch(Throwable t) {}
+			try { con.disconnect(); } catch(Throwable t) {}
+		}
+
+		return null;
+
+	}
+}
\ No newline at end of file
diff --git a/FishingBuddy/src/com/fishingbuddy/logic/WeatherModel/Location.java b/FishingBuddy/src/com/fishingbuddy/logic/WeatherModel/Location.java
new file mode 100644
index 0000000..67640de
--- /dev/null
+++ b/FishingBuddy/src/com/fishingbuddy/logic/WeatherModel/Location.java
@@ -0,0 +1,80 @@
+package com.fishingbuddy.logic.WeatherModel;
+
+/**
+ * This is a tutorial source code 
+ * provided "as is" and without warranties.
+ *
+ * For any question please visit the web site
+ * http://www.survivingwithandroid.com
+ *
+ * or write an email to
+ * survivingwithandroid@gmail.com
+ *
+ */
+
+import java.io.Serializable;
+/*
+ * Copyright (C) 2013 Surviving with Android (http://www.survivingwithandroid.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+public class Location implements Serializable {
+
+	private float longitude;
+	private float latitude;
+	private long sunset;
+	private long sunrise;
+	private String country;
+	private String city;
+
+	public float getLongitude() {
+		return longitude;
+	}
+	public void setLongitude(float longitude) {
+		this.longitude = longitude;
+	}
+	public float getLatitude() {
+		return latitude;
+	}
+	public void setLatitude(float latitude) {
+		this.latitude = latitude;
+	}
+	public long getSunset() {
+		return sunset;
+	}
+	public void setSunset(long sunset) {
+		this.sunset = sunset;
+	}
+	public long getSunrise() {
+		return sunrise;
+	}
+	public void setSunrise(long sunrise) {
+		this.sunrise = sunrise;
+	}
+	public String getCountry() {
+		return country;
+	}
+	public void setCountry(String country) {
+		this.country = country;
+	}
+	public String getCity() {
+		return city;
+	}
+	public void setCity(String city) {
+		this.city = city;
+	}
+
+
+
+
+}
\ No newline at end of file
diff --git a/FishingBuddy/src/com/fishingbuddy/logic/WeatherModel/Weather.java b/FishingBuddy/src/com/fishingbuddy/logic/WeatherModel/Weather.java
new file mode 100644
index 0000000..d34dcce
--- /dev/null
+++ b/FishingBuddy/src/com/fishingbuddy/logic/WeatherModel/Weather.java
@@ -0,0 +1,191 @@
+package com.fishingbuddy.logic.WeatherModel;
+
+/**
+ * This is a tutorial source code 
+ * provided "as is" and without warranties.
+ *
+ * For any question please visit the web site
+ * http://www.survivingwithandroid.com
+ *
+ * or write an email to
+ * survivingwithandroid@gmail.com
+ *
+ */
+
+/*
+ * Copyright (C) 2013 Surviving with Android (http://www.survivingwithandroid.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+public class Weather {
+
+	public Location location;
+	public CurrentCondition currentCondition = new CurrentCondition();
+	public Temperature temperature = new Temperature();
+	public Wind wind = new Wind();
+	public Rain rain = new Rain();
+	public Snow snow = new Snow()	;
+	public Clouds clouds = new Clouds();
+
+	public byte[] iconData;
+
+	public  class CurrentCondition {
+		private int weatherId;
+		private String condition;
+		private String descr;
+		private String icon;
+
+
+		private float pressure;
+		private float humidity;
+
+		public int getWeatherId() {
+			return weatherId;
+		}
+		public void setWeatherId(int weatherId) {
+			this.weatherId = weatherId;
+		}
+		public String getCondition() {
+			return condition;
+		}
+		public void setCondition(String condition) {
+			this.condition = condition;
+		}
+		public String getDescr() {
+			return descr;
+		}
+		public void setDescr(String descr) {
+			this.descr = descr;
+		}
+		public String getIcon() {
+			return icon;
+		}
+		public void setIcon(String icon) {
+			this.icon = icon;
+		}
+		public float getPressure() {
+			return pressure;
+		}
+		public void setPressure(float pressure) {
+			this.pressure = pressure;
+		}
+		public float getHumidity() {
+			return humidity;
+		}
+		public void setHumidity(float humidity) {
+			this.humidity = humidity;
+		}
+
+
+	}
+
+	public  class Temperature {
+		private float temp;
+		private float minTemp;
+		private float maxTemp;
+
+		public float getTemp() {
+			return temp;
+		}
+		public void setTemp(float temp) {
+			this.temp = temp;
+		}
+		public float getMinTemp() {
+			return minTemp;
+		}
+		public void setMinTemp(float minTemp) {
+			this.minTemp = minTemp;
+		}
+		public float getMaxTemp() {
+			return maxTemp;
+		}
+		public void setMaxTemp(float maxTemp) {
+			this.maxTemp = maxTemp;
+		}
+
+	}
+
+	public  class Wind {
+		private float speed;
+		private float deg;
+		public float getSpeed() {
+			return speed;
+		}
+		public void setSpeed(float speed) {
+			this.speed = speed;
+		}
+		public float getDeg() {
+			return deg;
+		}
+		public void setDeg(float deg) {
+			this.deg = deg;
+		}
+
+
+	}
+
+	public  class Rain {
+		private String time;
+		private float ammount;
+		public String getTime() {
+			return time;
+		}
+		public void setTime(String time) {
+			this.time = time;
+		}
+		public float getAmmount() {
+			return ammount;
+		}
+		public void setAmmount(float ammount) {
+			this.ammount = ammount;
+		}
+
+
+
+	}
+
+	public  class Snow {
+		private String time;
+		private float ammount;
+
+		public String getTime() {
+			return time;
+		}
+		public void setTime(String time) {
+			this.time = time;
+		}
+		public float getAmmount() {
+			return ammount;
+		}
+		public void setAmmount(float ammount) {
+			this.ammount = ammount;
+		}
+
+
+	}
+
+	public  class Clouds {
+		private int perc;
+
+		public int getPerc() {
+			return perc;
+		}
+
+		public void setPerc(int perc) {
+			this.perc = perc;
+		}
+
+
+	}
+
+}
\ No newline at end of file
